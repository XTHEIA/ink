plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'kr.sbxt.xtheia.theia'
version = '0.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = uri("https://maven.pkg.github.com/XTHEIA/theiacore")
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly "io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT"
    implementation(group: 'kr.sbxt.xtheia.theia', name: 'theiacore', 'version': 'b1.0.42')
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/XTHEIA/ink")
            credentials {
                username = System.getenv("GITHUBPACKAGES_USERNAME")
                password = System.getenv("GITHUBPACKAGES_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {

            System.out.println('published with name ' + System.getenv("GITHUBPACKAGES_USERNAME"))

            def file = new File('core.version');
            int previous = Integer.parseInt(file.text)
            int build = previous + 1
            file.write(build.toString())

            def publishName = 'Ink'
            def publishDesc = 'Built at ' + LocalDateTime.now().format("yyyy.MM.dd HH:mm:ss");

            from(components.java)

            version('b' + version + '.' + build)
            description(publishDesc)

            pom {

                name = publishName
                description = publishDesc

                scm {
                    connection = 'scm:git:https://github.com/XTHEIA/ink.git'
                    url = 'https://github.com/XTHEIA/ink'
                    developerConnection = 'https://github.com/XTHEIA/ink'
                }
            }

        }
    }
}


def targetJavaVersion = 17

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
javadoc {
    options.encoding = 'UTF-8'
}
java {
    withSourcesJar()
    withJavadocJar()

    toolchain.languageVersion.set(JavaLanguageVersion.of(17))

    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
